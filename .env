# Whisper Web Transcriber Configuration
# 复制自 .env.sample 并根据需要修改配置

# ==================== 服务器配置 ====================
# Flask应用密钥，用于会话加密和安全功能
# 调用程序: main.py
SECRET_KEY=whisper-web-transcriber-secret-key-2024

# 调试模式开关，生产环境请设置为False
# 调用程序: main.py
DEBUG=False

# 服务器监听地址，0.0.0.0表示监听所有网络接口
# 调用程序: main.py
HOST=0.0.0.0

# 服务器端口号
# 调用程序: main.py
PORT=5552

# ==================== 文件管理配置 ====================
# 文件最大保存天数，超过此天数的文件将被自动清理
# 调用函数: cleanup_old_files (core/file_manager.py)
# 删除: MAX_FILE_AGE (在代码中未使用)
# 单个文件最大大小限制(MB)
# 调用程序: main.py
MAX_CONTENT_LENGTH=1000

# 上传文件存储目录
# 调用程序: main.py, core/file_manager.py
UPLOAD_FOLDER=uploads

# 转录结果输出目录
# 调用程序: main.py, core/file_manager.py
OUTPUT_FOLDER=outputs

# ==================== 模型配置 ====================
# Whisper模型存储基础路径
# 调用程序: main.py, config.py
MODEL_BASE_PATH=/opt/models/openai

# 默认使用的Whisper模型
# 可选: tiny(最快), base, small, medium, large, large-v2, large-v3, turbo(推荐)
# 调用程序: main.py
DEFAULT_MODEL=small

# 系统支持的模型列表，用逗号分隔
# 调用程序: main.py, config.py
SUPPORTED_MODELS=tiny,base,small,medium,large,large-v2,large-v3,turbo

# ==================== GPU配置 ====================
# 默认使用的GPU ID，多个GPU用逗号分隔(如: 0,1,2)
# 调用程序: main.py
DEFAULT_GPU_IDS=0

# GPU显存使用上限比例(0.1-1.0)，建议0.8以保留系统显存
# 调用程序: main.py
MAX_GPU_MEMORY=0.8

# ==================== 转录设置 ====================
# 默认语言设置，auto为自动检测，也可指定具体语言代码(如: zh, en, ja)
# 调用程序: main.py
DEFAULT_LANGUAGE=auto

# 最大并发转录任务数，根据GPU显存和性能调整
# 调用程序: main.py
MAX_CONCURRENT_TRANSCRIPTIONS=5

# 单个转录任务超时时间(秒)，超时任务将被强制终止
# 调用程序: main.py
TRANSCRIPTION_TIMEOUT=3600

# 长音频分段处理时长(秒)，用于处理超长音频文件
# 调用程序: main.py
SEGMENT_DURATION=30

# ==================== 内存管理 ====================
# 显存安全边距，预留给系统的显存比例
# 调用程序: main.py, core/gpu_manager.py
MEMORY_SAFETY_MARGIN=0.1

# 预留显存大小(GB)，用于系统和其他进程
# 调用程序: main.py, core/gpu_manager.py, core/optimized_whisper.py
RESERVED_MEMORY=0.0

# ==================== 日志配置 ====================
# 日志级别: DEBUG, INFO, WARNING, ERROR, CRITICAL
# 调用程序: main.py, utils/logger.py
LOG_LEVEL=INFO

# 日志文件路径
# 调用程序: main.py, utils/logger.py
LOG_FILE=logs/app.log

# ==================== WebSocket配置 ====================
# WebSocket连接超时时间(秒)
# 调用程序: main.py
WEBSOCKET_PING_TIMEOUT=60

# WebSocket心跳检测间隔(秒)
# 调用程序: main.py
WEBSOCKET_PING_INTERVAL=25

# ==================== 安全配置 ====================
# 允许上传的音频文件扩展名，用逗号分隔
# 调用程序: main.py
ALLOWED_EXTENSIONS=wav,mp3,mp4,avi,mov,m4a,flac,ogg,wma,aac

# 文件名最大长度限制
# 调用程序: main.py
MAX_FILENAME_LENGTH=255

# ==================== 性能配置 ====================
# 工作线程数，用于处理并发请求
# 调用程序: main.py
WORKER_THREADS=4

# 自动清理任务执行间隔(秒)
# 调用程序: main.py
CLEANUP_INTERVAL=3600

# 内存清理触发阈值，当内存使用率超过此值时触发清理
# 调用程序: main.py
MEMORY_CLEANUP_THRESHOLD=0.9

# ==================== 优化系统配置 ====================
# 启用优化系统，提供智能队列管理和显存优化
# 调用程序: main.py
ENABLE_OPTIMIZATION_SYSTEM=True

# 批量任务调度间隔(秒)，调度器检查和执行任务的频率
# 调用程序: main.py
BATCH_SCHEDULE_INTERVAL=2

# 最大任务重试次数，失败任务的最大重试次数
# 调用程序: main.py
MAX_TASK_RETRIES=3

# 显存校准参数，用于动态调整模型显存预估
# 调用程序: main.py
MEMORY_CALIBRATION_FACTOR=1.2

# 性能监控间隔(秒)，系统性能指标收集频率
# 调用程序: main.py
PERFORMANCE_MONITOR_INTERVAL=30

# 自适应优化开关，根据性能指标自动调整参数
# 调用程序: main.py
ENABLE_ADAPTIVE_OPTIMIZATION=True


# 批处理大小调整范围，每批次处理的任务数量范围
# 调用程序: main.py
MIN_BATCH_SIZE=1
MAX_BATCH_SIZE=4

# ==================== 新增参数 ====================
# 最大任务数限制，用于防止系统过载
# 调用程序: main.py, core/gpu_manager.py
# 新增
MAX_TASKS_PER_GPU=5

# ==================== 删除参数 ====================
# 删除: MAX_LOG_SIZE (在代码中未使用)
# 删除: LOG_BACKUP_COUNT (在代码中未使用)
# 删除: MAX_FILE_AGE (在代码中未使用)
